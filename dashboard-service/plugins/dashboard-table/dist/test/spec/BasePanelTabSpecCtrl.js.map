{"version":3,"sources":["../../../spec/BasePanelTabSpecCtrl.js"],"names":["describe","ctx","beforeEach","$q","scope","ctrl","addQuery","object","refresh","dashboard","panel","sources","namespace","getNextQueryLetter","datasourceSrv","dataservice","get","when","getSources","dataspec","bst","it","done","spy","panelCtrl","expect","calledOnce","refreshPanel","getAliases","aliases","to","have","length","equal"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AACAA,SAAS,sBAAT,EAAiC,YAAW;AACxC,QAAIC,MAAM,EAAV;;AAEAC,eAAW,YAAW;;AAElBD,YAAIE,EAAJ;AACAF,YAAIG,KAAJ,GAAY;AACRC,kBAAO;AACHC,0BAAW,kBAASC,MAAT,EAAgB,CAE1B,CAHE;AAIHC,yBAAU,mBAAU,CAEnB,CANE;AAOHC,2BAAW,EAPR;AAUHC,uBAAQ;AACLC,6BAAU;AACNC,mCAAY,CAAC,UAAD;AADN;AADL;AAVL;;AADC,SAAZ;AAmBAX,YAAIG,KAAJ,CAAUC,IAAV,CAAeI,SAAf,CAAyBI,kBAAzB,GAA8C,UAASH,KAAT,EAAe;AACzD,mBAAO,GAAP;AACH,SAFD;;AAIAT,YAAIa,aAAJ,GAAoB,EAApB;AACAb,YAAIc,WAAJ,GAAkB,EAAlB;AACAd,YAAIa,aAAJ,CAAkBE,GAAlB,GAAwB,YAAU;AAC9B,mBAAOf,IAAIE,EAAJ,CAAOc,IAAP,CAAY;AACfC,4BAAa,oBAASC,QAAT,EAAkB;AAC3B,2BAAOlB,IAAIE,EAAJ,CAAOc,IAAP,CAAY;AACfL,mCAAY,CAAC,UAAD,EAAa,UAAb;AADG,qBAAZ,CAAP;AAGH;AALc,aAAZ,CAAP;AAOH,SARD;AASAX,YAAImB,GAAJ,GAAU,mCAAqBnB,IAAIG,KAAzB,EAAgCH,IAAIa,aAApC,CAAV;AACH,KAtCD;;AAwCAO,OAAG,6EAAH,EAAkF,UAASC,IAAT,EAAe;AAC7F,YAAIC,MAAM,gBAAMA,GAAN,CAAUtB,IAAImB,GAAJ,CAAQI,SAAlB,EAA6B,UAA7B,CAAV;AACAvB,YAAImB,GAAJ,CAAQd,QAAR;AACAmB,eAAOF,IAAIG,UAAX;AACAJ;AACH,KALD;;AAOAD,OAAG,gFAAH,EAAqF,UAASC,IAAT,EAAe;AAChG,YAAIC,MAAM,gBAAMA,GAAN,CAAUtB,IAAImB,GAAJ,CAAQI,SAAlB,EAA6B,SAA7B,CAAV;AACAvB,YAAImB,GAAJ,CAAQO,YAAR;AACAF,eAAOF,IAAIG,UAAX;AACAJ;AACH,KALD;;AAOAD,OAAG,gEAAH,EAAqE,UAASC,IAAT,EAAe;AAChF,YAAIC,MAAM,gBAAMA,GAAN,CAAUtB,IAAImB,GAAd,EAAmB,iBAAnB,CAAV;AACAnB,YAAImB,GAAJ,CAAQQ,UAAR,CAAmB,WAAnB;AACAH,eAAOF,IAAIG,UAAX;AACAJ;AACH,KALD;;AAOAD,OAAG,iDAAH,EAAsD,UAASC,IAAT,EAAe;AACjE,YAAIO,UAAU5B,IAAImB,GAAJ,CAAQQ,UAAR,CAAmB,WAAnB,CAAd;AACAH,eAAOI,OAAP,EAAgBC,EAAhB,CAAmBC,IAAnB,CAAwBC,MAAxB,CAA+B,CAA/B;AACAP,eAAOI,QAAQ,CAAR,CAAP,EAAmBC,EAAnB,CAAsBG,KAAtB,CAA4B,UAA5B;AACAX;AACH,KALD;AASH,CAzED","file":"BasePanelTabSpecCtrl.js","sourcesContent":["import {BasePanelTabCtrl} from '../BasePanelTab.js'\nimport Q from \"q\";\nimport sinon from \"sinon\"\ndescribe('Base Panel Tab Tests', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n\n        ctx.$q= Q;\n        ctx.scope = {\n            ctrl : {\n                addQuery : function(object){\n                    \n                },\n                refresh : function(){\n\n                },\n                dashboard: {\n\n                },\n                panel : {\n                   sources : {\n                       namespace : ['aliasOne']  \n                   } \n                }   \n            }\n            \n        };\n        ctx.scope.ctrl.dashboard.getNextQueryLetter = function(panel){\n            return 'A'\n        };\n\n        ctx.datasourceSrv = {}\n        ctx.dataservice = {}\n        ctx.datasourceSrv.get = function(){\n            return ctx.$q.when({\n                getSources : function(dataspec){\n                    return ctx.$q.when({\n                        namespace : ['aliasOne', 'aliasTwo']\n                    })\n                }\n            })\n        };\n        ctx.bst = new BasePanelTabCtrl(ctx.scope, ctx.datasourceSrv);\n    });\n\n    it('Panel Ctrl addQuery should be called when addQuery on Panel Tab is executed', function(done) {\n        var spy = sinon.spy(ctx.bst.panelCtrl, \"addQuery\");\n        ctx.bst.addQuery()\n        expect(spy.calledOnce);\n        done();\n    });\n\n    it('Panel Ctrl refresh should be called when refreshPanel on Panel Tab is executed', function(done) {\n        var spy = sinon.spy(ctx.bst.panelCtrl, \"refresh\");\n        ctx.bst.refreshPanel()\n        expect(spy.calledOnce);\n        done();\n    });\n\n    it('Metadata is refreshed when aliases are not currently available', function(done) {\n        var spy = sinon.spy(ctx.bst, \"refreshMetadata\");\n        ctx.bst.getAliases('namespace')\n        expect(spy.calledOnce);\n        done();\n    });\n\n    it('Alias is properly returned for a give namespace', function(done) {\n        var aliases = ctx.bst.getAliases('namespace')\n        expect(aliases).to.have.length(1);\n        expect(aliases[0]).to.equal('aliasOne');\n        done();\n    });\n\n\n\n});\n"]}