{"version":3,"sources":["../src/BasePanelCtrl.js"],"names":["_","PanelCtrl","kbn","$","queryTabDirective","finraDrilldownDirective","angular","BasePanelCtrl","$scope","$injector","has","module","directive","editorTabIndex","$q","get","datasourceSrv","timeSrv","templateSrv","scope","panel","targets","dd","hasRawData","events","on","_onMetricsPanelRefresh","bind","_onInitMetricsPanelEditMode","addEditorTab","datasource","otherPanelInFullscreenMode","data","render","snapshotData","updateTimeRange","isArray","emit","dataStream","error","loading","then","issueQueries","handleQueryResult","_setDataSouce","catch","err","cancelled","console","log","message","inspector","range","timeRange","rangeRaw","raw","applyPanelTimeOverrides","maxDataPoints","resolution","Math","ceil","window","width","span","calculateInterval","intervalOverride","interval","replace","scopedVars","res","intervalMs","timeInfo","timeFrom","timeFromInterpolated","timeFromInfo","rangeUtil","describeTextRange","invalid","isString","from","timeFromDate","dateMath","parse","display","to","timeShift","timeShiftInterpolated","timeShiftInfo","parseDateMath","hideTimeOverride","value","isNumber","decimals","scaledDecimals","delta","dec","floor","LN10","magn","pow","norm","size","result","max","namespace","source","alias","Object","assign","text","variables","forEach","variable","current","name","query","panelId","id","format","renderer","cacheTimeout","dashboard","snapshot","target","refId","getNextQueryLetter","push","nextRefId","index","indexOf","splice","refresh"],"mappings":"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","file":"BasePanelCtrl.js","sourcesContent":["import _ from \"lodash\";\nimport {PanelCtrl} from \"app/plugins/sdk\";\nimport kbn from \"app/core/utils/kbn\";\nimport $ from \"jquery\";\nimport \"jquery.flot\";\nimport \"./jquery-ui-dist/jquery-ui\";\nimport \"./jquery-ui-dist/jquery-ui.css!\";\nimport \"./jquery-ui-dist/jquery-ui.theme.css!\";\nimport {queryTabDirective} from './BasePanelTabCtrl';\nimport {finraDrilldownDirective} from \"./drilldown\";\nimport \"./drilldown.css!\";\nimport angular from 'angular'\n\n\nexport class BasePanelCtrl extends PanelCtrl {\n\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        //This is to avoid extending controllers from re-adding drilldown,\n        //which will through errors because it has isolated scoop. This\n        //should definitely be revisited\n        if(!$injector.has('finraDrilldownDirective')){\n            angular.module('grafana.directives').directive('finraDrilldown', finraDrilldownDirective);\n        }\n        this.editorTabIndex = 1;\n        this.$q = $injector.get('$q');\n        this.datasourceSrv = $injector.get('datasourceSrv');\n        this.timeSrv = $injector.get('timeSrv');\n        this.templateSrv = $injector.get('templateSrv');\n        this.scope = $scope;\n\n        if (!this.panel.targets) {\n            this.panel.targets = [{}];\n        \n        }\n        if(!this.panel.dd) {\n            this.panel.dd = {}\n            this.panel.dd.hasRawData = false;\n        }\n    \n\n        this.events.on('refresh', this._onMetricsPanelRefresh.bind(this));\n        this.events.on('init-edit-mode', this._onInitMetricsPanelEditMode.bind(this));\n    }\n    \n\n    _onInitMetricsPanelEditMode() {\n        this.addEditorTab('Query', queryTabDirective);\n    }\n\n    _setDataSouce(datasource){\n        this.datasource = datasource;\n    }\n    _onMetricsPanelRefresh() {\n        \n        // ignore fetching data if another panel is in fullscreen\n        if (this.otherPanelInFullscreenMode()) { return; }\n\n        //Adding this to force a resize on the templates.\n        //without this, you would end up with the barchart graph staying\n        //the same while the panel shrunk after - editting, doing a query, then exiting fullscreen\n        this.data=[];\n        this.render();\n        // if we have snapshot data use that\n        if (this.panel.snapshotData) {\n            this.updateTimeRange();\n            var data = this.panel.snapshotData;\n            // backward compatability\n            if (!_.isArray(data)) {\n                data = data.data;\n            }\n\n            this.events.emit('data-snapshot-load', data);\n            return;\n        }\n\n        // // ignore if we have data stream\n        if (this.dataStream) {\n            return;\n        }\n\n        // clear loading/error state\n        delete this.error;\n        this.loading = true;\n\n        // load datasource service\n        this.datasourceSrv.get(this.panel.datasource)\n            .then(this.updateTimeRange.bind(this))\n            .then(this.issueQueries.bind(this))\n            .then(this.handleQueryResult.bind(this))\n            .then(this._setDataSouce(this.panel.datasource))\n            .catch(err => {\n                // if cancelled  keep loading set to true\n                if (err.cancelled) {\n                    console.log('Panel request cancelled', err);\n                    return;\n                }\n\n                this.loading = false;\n                this.error = err.message || \"Request Error\";\n                this.inspector = {error: err};\n\n                if (err.data) {\n                    if (err.data.message) {\n                        this.error = err.data.message;\n                    }\n                    if (err.data.error) {\n                        this.error = err.data.error;\n                    }\n                }\n\n                this.events.emit('data-error', err);\n                console.log('Panel data error:', err);\n            });\n    }\n\n    updateTimeRange(datasource) {\n        this.datasource = datasource || this.datasource;\n        this.range = this.timeSrv.timeRange();\n        this.rangeRaw = this.range.raw;\n\n        this.applyPanelTimeOverrides();\n\n        if (this.panel.maxDataPoints) {\n            this.resolution = this.panel.maxDataPoints;\n        } else {\n            this.resolution = Math.ceil($(window).width() * (this.panel.span / 12));\n        }\n\n        this.calculateInterval();\n\n        return this.datasource;\n    }\n\n    calculateInterval() {\n        var intervalOverride = this.panel.interval;\n\n        // if no panel interval check datasource\n        if (intervalOverride) {\n            intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\n        } else if (this.datasource && this.datasource.interval) {\n            intervalOverride = this.datasource.interval;\n        }\n\n        var res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\n        this.interval = res.interval;\n        this.intervalMs = res.intervalMs;\n    }\n\n    applyPanelTimeOverrides() {\n        this.timeInfo = '';\n\n        // check panel time overrrides\n        if (this.panel.timeFrom) {\n            var timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\n            var timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n            if (timeFromInfo.invalid) {\n                this.timeInfo = 'invalid time override';\n                return;\n            }\n\n            if (_.isString(this.rangeRaw.from)) {\n                var timeFromDate = dateMath.parse(timeFromInfo.from);\n                this.timeInfo = timeFromInfo.display;\n                this.rangeRaw.from = timeFromInfo.from;\n                this.rangeRaw.to = timeFromInfo.to;\n                this.range.from = timeFromDate;\n                this.range.to = dateMath.parse(timeFromInfo.to);\n            }\n        }\n\n        if (this.panel.timeShift) {\n            var timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\n            var timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n            if (timeShiftInfo.invalid) {\n                this.timeInfo = 'invalid timeshift';\n                return;\n            }\n\n            var timeShift = '-' + timeShiftInterpolated;\n            this.timeInfo += ' timeshift ' + timeShift;\n            this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\n            this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\n\n            this.rangeRaw = this.range;\n        }\n\n        if (this.panel.hideTimeOverride) {\n            this.timeInfo = '';\n        }\n    }\n\n\n    getDecimalsForValue(value) {\n        if (_.isNumber(this.panel.decimals)) {\n            return {decimals: this.panel.decimals, scaledDecimals: null};\n        }\n\n        var delta = value / 2;\n        var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n        var magn = Math.pow(10, -dec);\n        var norm = delta / magn; // norm is between 1.0 and 10.0\n        var size;\n\n        if (norm < 1.5) {\n            size = 1;\n        } else if (norm < 3) {\n            size = 2;\n            // special case for 2.5, requires an extra decimal\n            if (norm > 2.25) {\n                size = 2.5;\n                ++dec;\n            }\n        } else if (norm < 7.5) {\n            size = 5;\n        } else {\n            size = 10;\n        }\n\n        size *= magn;\n\n        // reduce starting decimals if not needed\n        if (Math.floor(value) === value) {\n            dec = 0;\n        }\n\n\n        var result = {};\n        result.decimals = Math.max(0, dec);\n        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n        return result;\n    }\n    \n\n    \n    issueQueries(datasource) {\n        this.datasource = datasource;\n        // make shallow copy of scoped vars,\n        // and add built in variables interval and interval_ms\n        var namespace = this.panel.source ? this.panel.source : \"\"\n        var alias = this.panel.alias ? this.panel.alias : \"\"\n        var scopedVars = Object.assign({}, this.panel.scopedVars, {\n            \"__interval\":     {text: this.interval,   value: this.interval},\n            \"__interval_ms\":  {text: this.intervalMs, value: this.intervalMs}\n        });\n        \n        this.templateSrv.variables.forEach(function(variable){\n            if(variable.current && variable.current.value){\n                scopedVars[variable.name] = {\n                    text: variable.current.text,   \n                    value: variable.current.value\n                }\n            }\n        });\n    \n        var query = {\n            panelId: this.panel.id,\n            range: this.range,\n            rangeRaw: this.rangeRaw,\n            interval: this.interval,\n            intervalMs: this.intervalMs,\n            namespace : {\"name\": namespace},\n            alias :alias,\n            targets: this.panel.targets,\n            format: this.panel.renderer === 'png' ? 'png' : 'json',\n            maxDataPoints: this.resolution,\n            scopedVars: scopedVars,\n            cacheTimeout: this.panel.cacheTimeout\n        };\n        return datasource.query(query);\n    }\n    \n    handleQueryResult(result) {\n        this.loading = false;\n        \n    \n        if (this.dashboard.snapshot) {\n            this.panel.snapshotData = result.data;\n        }\n    \n        if (!result || !result.data) {\n            console.log('Data source query result invalid, missing data field:', result);\n            result = {data: []};\n        }\n    \n        this.events.emit('data-received', result.data);\n    }\n    \n    \n    \n    addQuery(target) {\n        target.refId = this.dashboard.getNextQueryLetter(this.panel);\n        this.panel.targets.push(target);\n        this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    }\n    \n    removeQuery(target) {\n        var index = _.indexOf(this.panel.targets, target);\n        this.panel.targets.splice(index, 1);\n        this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n        this.refresh();\n    }\n\n}\n"]}