{"version":3,"sources":["../src/column_options.js"],"names":["columnOptionsTab","$q","uiSegmentSrv","restrict","scope","templateUrl","controller","ColumnOptionsCtrl","_","kbn","$scope","editor","activeStyleIndex","panelCtrl","ctrl","panel","unitFormats","getUnitFormats","colorModes","text","value","columnTypes","fontSizes","dateFormats","getColumnNames","table","map","columns","col","render","column","subItem","unit","newStyleRule","type","alias","decimals","colors","colorMode","pattern","dateFormat","thresholds","styles","stylesCount","length","indexToInsert","last","splice","style","without","index","ref","copy","textMappings","push"],"mappings":"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","file":"column_options.js","sourcesContent":["import _ from 'lodash';\nimport kbn from '/public/app/core/utils/kbn';\n\nexport class ColumnOptionsCtrl {\n    /** @ngInject */\n    constructor($scope) {\n        $scope.editor = this;\n        this.activeStyleIndex = 0;\n        this.panelCtrl = $scope.ctrl;\n        this.panel = this.panelCtrl.panel;\n        this.unitFormats = kbn.getUnitFormats();\n        this.colorModes = [\n            {text: 'Disabled', value: null},\n            {text: 'Cell', value: 'cell'},\n            {text: 'Value', value: 'value'},\n            {text: 'Row', value: 'row'},\n        ];\n        this.columnTypes = [\n            {text: 'Number', value: 'number'},\n            {text: 'String', value: 'string'},\n            {text: 'Date', value: 'date'},\n            {text: 'Hidden', value: 'hidden'}\n        ];\n        this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n        this.dateFormats = [\n            {text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss'},\n            {text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS'},\n            {text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a'},\n            {text: 'MMMM D, YYYY LT',  value: 'MMMM D, YYYY LT'},\n        ];\n\n        this.getColumnNames = () => {\n            if (!this.panelCtrl.table) {\n                return [];\n            }\n            return _.map(this.panelCtrl.table.columns, function(col) {\n                return col.text;\n            });\n        };\n    }\n\n    render() {\n        this.panelCtrl.render();\n    }\n\n    setUnitFormat(column, subItem) {\n        column.unit = subItem.value;\n        this.panelCtrl.render();\n    }\n\n    addColumnStyle() {\n        var newStyleRule = {\n            unit: 'short',\n            type: 'number',\n            alias: '',\n            decimals: 2,\n            colors: [\"rgba(245, 54, 54, 0.9)\", \"rgba(237, 129, 40, 0.89)\", \"rgba(50, 172, 45, 0.97)\"],\n            colorMode: null,\n            pattern: '',\n            dateFormat: 'YYYY-MM-DD HH:mm:ss',\n            thresholds: [],\n        };\n\n        var styles = this.panel.styles;\n        var stylesCount = styles.length;\n        var indexToInsert = stylesCount;\n\n        // check if last is a catch all rule, then add it before that one\n        if (stylesCount > 0) {\n            var last = styles[stylesCount-1];\n            if (last.pattern === '/.*/') {\n                indexToInsert = stylesCount-1;\n            }\n        }\n\n        styles.splice(indexToInsert, 0, newStyleRule);\n        this.activeStyleIndex = indexToInsert;\n    }\n\n    removeColumnStyle(style) {\n        this.panel.styles = _.without(this.panel.styles, style);\n    }\n\n    invertColorOrder(index) {\n        var ref = this.panel.styles[index].colors;\n        var copy = ref[0];\n        ref[0] = ref[2];\n        ref[2] = copy;\n        this.panelCtrl.render();\n    }\n\n    addTextMapping(style) {\n        if (!style.textMappings) {\n            style.textMappings = [];\n        }\n        style.textMappings.push({text: '', value: null});\n        this.panelCtrl.render();\n    }\n\n    removeTextMapping(style, index) {\n        style.textMappings.splice(index, 1);\n        this.panelCtrl.render();\n    }\n}\n\n/** @ngInject */\nexport function columnOptionsTab($q, uiSegmentSrv) {\n    'use strict';\n    return {\n        restrict: 'E',\n        scope: true,\n        templateUrl: 'public/plugins/finra-table/column_options.html',\n        controller: ColumnOptionsCtrl,\n    };\n}"]}