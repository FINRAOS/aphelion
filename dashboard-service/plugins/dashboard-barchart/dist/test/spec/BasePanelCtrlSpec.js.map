{"version":3,"sources":["../../../spec/BasePanelCtrlSpec.js"],"names":["describe","ctx","beforeEach","$q","scope","timeSrv","templateSrv","variables","datasourceSrv","dataservice","injector","get","key","has","bsc","it","done","spy","panel","targets","addQuery","target","field","val","expect","to","equal","removeQuery","an","that","is","empty","assert","calledOnce","datasource","query","options","alias","namespace","name","issueQueries","events","handleQueryResult","calledWith","Object","keys","scopedVars","have","length","value","text","property","current"],"mappings":"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","file":"BasePanelCtrlSpec.js","sourcesContent":["import {BasePanelCtrl} from '../BasePanelCtrl.js'\nimport Q from \"q\";\nimport sinon from \"sinon\"\ndescribe('Base Panel Controller Tests', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q= Q;\n        ctx.scope = {\n            \n            \n        };\n        ctx.timeSrv = {};\n        ctx.templateSrv = {};\n        ctx.templateSrv.variables = [\n            \n        ]\n        \n        \n        ctx.datasourceSrv = {}\n        ctx.dataservice = {}\n        ctx.injector = {\n            get : function(key){\n                if(key ===  'datasourceSrv' ){  \n                    return ctx.datasourceSrv\n                }else if(key === 'timeSrv'){\n                    return ctx.timeSrv\n                }else if (key === 'templateSrv'){\n                    return ctx.templateSrv;\n                }\n                else if (key === '$q'){\n                    return ctx.$q;\n                }\n                \n            },\n            has: function(key){\n                return true;\n            }\n        }\n      \n        ctx.bsc = new BasePanelCtrl(ctx.scope, ctx.injector);\n    });\n\n    it('Adding a query pushes to target for later use in query', function(done) {\n        var spy = sinon.spy(ctx.bsc.panel.targets, \"push\");\n        ctx.bsc.addQuery({target : {field : 'a', val : 'val'}})\n        expect(ctx.bsc.panel.targets[1].target.field).to.equal('a')\n        expect(ctx.bsc.panel.targets[1].target.val).to.equal('val')\n       done();\n    });\n\n    it('Removing a query pushes to target for later use in query', function(done) {\n        var spy = sinon.spy(ctx.bsc, \"refresh\");\n        ctx.bsc.addQuery({target : {field : 'a', val : 'val'}})\n        ctx.bsc.removeQuery({target : {field : 'a', val : 'val'}})\n        expect(ctx.bsc.panel.targets[0]).to.an('object').that.is.empty\n        sinon.assert.calledOnce(spy)\n        done();\n    });\n\n    it('Issueing a query to the datasource passes the correct params', function(done) {\n        var datasource = {\n            query : function(options){\n                expect(options.alias).to.equal('testAlias');\n                expect(options.namespace.name).to.equal('testNamespace');\n                done();\n            }\n        }\n        \n        ctx.bsc.issueQueries(datasource)\n        \n    });\n\n    it('If no data is received, as in the data field is missing, the result will be treated as empty', function(done) {\n        var spy = sinon.spy(ctx.bsc.events, \"emit\");\n        ctx.bsc.handleQueryResult({});\n        sinon.assert.calledWith(spy, 'data-received', [])\n\n        sinon.assert.calledOnce(spy)\n        done();\n    });\n\n    it('Issueing a query to the datasource should include the global variables', function(done) {\n        var datasource = {\n            query : function(options){\n                expect(options.alias).to.equal('testAlias');\n                expect(options.namespace.name).to.equal('testNamespace');\n                //4 due to the built-in interval variables\n                expect(Object.keys(options.scopedVars)).to.have.length(4);\n                expect(options.scopedVars[\"Test Name\"].value).to.equal(\"testValue\");\n                expect(options.scopedVars[\"Test Name\"].text).to.equal(\"Test Label\");\n                expect(options.scopedVars[\"Second Name\"].value).to.equal(\"Different Value\");\n                expect(options.scopedVars[\"Second Name\"].text).to.equal(\"Different Label\");\n\n                //the built-ins\n                expect(options.scopedVars).to.have.property(\"__interval\");\n                expect(options.scopedVars).to.have.property(\"__interval_ms\");\n               \n                \n                done();\n            }\n        }\n        \n        ctx.templateSrv.variables = [\n            {\n                name: \"Test Name\",\n                current : {\n                    value : \"testValue\",\n                    text : \"Test Label\"\n                }\n            },\n            {\n                name: \"Second Name\",\n                current : {\n                    value : \"Different Value\",\n                    text : \"Different Label\"\n                }\n            }\n        ]\n\n        ctx.bsc.issueQueries(datasource)\n\n    });\n\n});\n"]}