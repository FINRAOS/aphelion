{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","backendSrv","templateSrv","replace","data","ds","url","it","done","query","targets","then","result","expect","to","have","length","mockData","target","datapoints","alias","_request","equal","series","getSources","firstSource","firstNamespace","secondSource","secondNamespace","validator","request","parameters","column_a","column_b","field","value","name","mapping","key","getMetadata","metadata","updateMetadata","metricFindQuery","text","response","requestValidator","datasourceRequest","when"],"mappings":";;AAAA;;AACA;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAW;AACrC,QAAIC,MAAM,EAAV;;AAEAC,eAAW,YAAW;AAClBD,YAAIE,EAAJ;AACAF,YAAIG,UAAJ,GAAiB,EAAjB;AACAH,YAAII,WAAJ,GAAkB,EAAlB;AACAJ,YAAII,WAAJ,CAAgBC,OAAhB,GAA0B,UAASC,IAAT,EAAe;AACrC,mBAAOA,IAAP;AACH,SAFD;AAGAN,YAAIO,EAAJ,GAAS,uBAAe,EAACC,KAAI,iBAAL,EAAf,EAAwCR,IAAIE,EAA5C,EAAgDF,IAAIG,UAApD,EAAgEH,IAAII,WAApE,CAAT;AACH,KARD;;AAUAK,OAAG,mDAAH,EAAwD,UAASC,IAAT,EAAe;AACnEV,YAAIO,EAAJ,CAAOI,KAAP,CAAa,EAACC,SAAS,EAAV,EAAb,EAA4BC,IAA5B,CAAiC,UAASC,MAAT,EAAiB;AAC9CC,mBAAOD,OAAOR,IAAd,EAAoBU,EAApB,CAAuBC,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAR;AACH,SAHD;AAIH,KALD;;AAOAD,OAAG,sDAAH,EAA2D,UAASC,IAAT,EAAe;AACtES,iBAAS,CACL;AACIC,oBAAQ,GADZ;AAEIC,wBAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFhB,SADK,CAAT;;AASArB,YAAIO,EAAJ,CAAOI,KAAP,CAAa,EAACW,OAAQ,eAAT,EAA0BV,SAAQ,EAAlC,EAAb,EAAoDC,IAApD,CAAyD,UAASC,MAAT,EAAiB;AACtEC,mBAAOD,OAAOS,QAAP,CAAgBjB,IAAhB,CAAqBgB,KAA5B,EAAmCN,EAAnC,CAAsCQ,KAAtC,CAA4C,eAA5C;AACA,gBAAIC,SAASX,OAAOR,IAAP,CAAY,CAAZ,CAAb;AACAS,mBAAOU,OAAOL,MAAd,EAAsBJ,EAAtB,CAAyBQ,KAAzB,CAA+B,GAA/B;AACAT,mBAAOU,OAAOJ,UAAd,EAA0BL,EAA1B,CAA6BC,IAA7B,CAAkCC,MAAlC,CAAyC,CAAzC;AACAR;AACH,SAND;AAOH,KAjBD;;AAmBAD,OAAG,0CAAH,EAA+C,UAASC,IAAT,EAAe;;AAE1DS,iBAAS,CACL;AACI,8BAAmB,CAAC,UAAD,EAAa,UAAb;AADvB,SADK,EAIL;AACI,+BAAoB,CAAC,YAAD;AADxB,SAJK,CAAT;AAQAnB,YAAIO,EAAJ,CAAOmB,UAAP,CAAkB,KAAlB,EAAyBb,IAAzB,CAA8B,UAASC,MAAT,EAAgB;AAC1C,gBAAIa,cAAcb,OAAO,CAAP,CAAlB;AACAC,mBAAOY,YAAYC,cAAZ,CAA2B,CAA3B,CAAP,EAAsCZ,EAAtC,CAAyCQ,KAAzC,CAA+C,UAA/C;AACAT,mBAAOY,YAAYC,cAAZ,CAA2B,CAA3B,CAAP,EAAsCZ,EAAtC,CAAyCQ,KAAzC,CAA+C,UAA/C;AACA,gBAAIK,eAAef,OAAO,CAAP,CAAnB;AACAC,mBAAOc,aAAaC,eAAb,CAA6B,CAA7B,CAAP,EAAwCd,EAAxC,CAA2CQ,KAA3C,CAAiD,YAAjD;;AAEAd;AACH,SARD;AAUH,KApBD;;AAsBAD,OAAG,yEAAH,EAA8E,UAASC,IAAT,EAAe;AACzF,YAAIqB,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAiB;AAC7BjB,mBAAOiB,QAAQxB,GAAf,EAAoBQ,EAApB,CAAuBQ,KAAvB,CAA6B,qCAA7B;AACAT,mBAAOiB,QAAQ1B,IAAR,CAAa2B,UAAb,CAAwBC,QAA/B,EAAyClB,EAAzC,CAA4CQ,KAA5C,CAAkD,WAAlD;AACAT,mBAAOiB,QAAQ1B,IAAR,CAAa2B,UAAb,CAAwBE,QAA/B,EAAyCnB,EAAzC,CAA4CQ,KAA5C,CAAkD,cAAlD;AAEH,SALD;AAMAL,iBACI;AACI,sBAAS,CACL;AACI,wBAAO,CACH,CACI,CADJ,EAEI,GAFJ,CADG,CADX;AAOI,wBAAO;AAPX,aADK,EAUL;AACI,wBAAO,CACH,CACI,CADJ,EAEI,GAFJ,CADG,EAKH,CACI,CADJ,EAEI,GAFJ,CALG,CADX;AAWI,wBAAO;AAXX,aAVK,EAuBL;AACI,wBAAO,CACH,CACI,CADJ,EAEI,EAFJ,CADG,CADX;AAOI,wBAAO;AAPX,aAvBK,CADb;AAkCI,uBAAU,CACN;AACI,uBAAM,CADV;AAEI,yBAAQ;AAFZ,aADM,EAKN;AACI,uBAAM,CADV;AAEI,yBAAQ;AAFZ,aALM;AAlCd,SADJ,EA6CSY,SA7CT;AA8CA/B,YAAIO,EAAJ,CAAOI,KAAP,CAAa,EAACW,OAAQ,WAAT,EAAsBV,SAAU,CAAC,EAACwB,OAAO,UAAR,EAAoBC,OAAO,WAA3B,EAAD,EAA0C,EAACD,OAAO,UAAR,EAAoBC,OAAO,cAA3B,EAA1C,CAAhC,EAAb,EAAqIxB,IAArI,CAA0I,UAASC,MAAT,EAAgB;;AAEtJ,gBAAIW,SAASX,OAAOR,IAAP,CAAYmB,MAAzB;AACAV,mBAAOU,MAAP,EAAeT,EAAf,CAAkBC,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,mBAAOU,OAAO,CAAP,EAAUa,IAAjB,EAAuBtB,EAAvB,CAA0BQ,KAA1B,CAAgC,aAAhC;AACAT,mBAAOU,OAAO,CAAP,EAAUnB,IAAV,CAAe,CAAf,EAAkB,CAAlB,CAAP,EAA6BU,EAA7B,CAAgCQ,KAAhC,CAAsC,CAAtC;AACAT,mBAAOU,OAAO,CAAP,EAAUnB,IAAV,CAAe,CAAf,EAAkB,CAAlB,CAAP,EAA6BU,EAA7B,CAAgCQ,KAAhC,CAAsC,GAAtC;;AAGA,gBAAIe,UAAUzB,OAAOR,IAAP,CAAYiC,OAA1B;AACAxB,mBAAOwB,OAAP,EAAgBvB,EAAhB,CAAmBC,IAAnB,CAAwBC,MAAxB,CAA+B,CAA/B;AACAH,mBAAOwB,QAAQ,CAAR,EAAWC,GAAlB,EAAuBxB,EAAvB,CAA0BQ,KAA1B,CAAgC,CAAhC;AACAT,mBAAOwB,QAAQ,CAAR,EAAWF,KAAlB,EAAyBrB,EAAzB,CAA4BQ,KAA5B,CAAkC,KAAlC;AACAT,mBAAOwB,QAAQ,CAAR,EAAWC,GAAlB,EAAuBxB,EAAvB,CAA0BQ,KAA1B,CAAgC,CAAhC;AACAT,mBAAOwB,QAAQ,CAAR,EAAWF,KAAlB,EAAyBrB,EAAzB,CAA4BQ,KAA5B,CAAkC,MAAlC;;AAEAd;AACH,SAjBD;AAkBH,KAvED;;AAyEAD,OAAG,uDAAH,EAA4D,UAASC,IAAT,EAAe;AACvE,YAAIqB,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAiB;AAC7BjB,mBAAOiB,QAAQxB,GAAf,EAAoBQ,EAApB,CAAuBQ,KAAvB,CAA6B,uDAA7B;AAEH,SAHD;AAIAL,iBACI;AACEc,wBAAY,CACR,EAAE,QAAQ,YAAV,EAAwB,SAAS,UAAjC,EADQ,EAER,EAAE,QAAQ,eAAV,EAA2B,SAAS,UAApC,EAFQ;AADd,SADJ,EAMSF,SANT;AAOA/B,YAAIO,EAAJ,CAAOkC,WAAP,CAAmB,MAAnB,EAA2B5B,IAA3B,CAAgC,UAASC,MAAT,EAAgB;AAC5C,gBAAI4B,WAAW5B,OAAOR,IAAtB;AACAS,mBAAO2B,SAAST,UAAhB,EAA4BjB,EAA5B,CAA+BC,IAA/B,CAAoCC,MAApC,CAA2C,CAA3C;AACAH,mBAAO2B,SAAST,UAAT,CAAoB,CAApB,EAAuBK,IAA9B,EAAoCtB,EAApC,CAAuCQ,KAAvC,CAA6C,YAA7C;AACAT,mBAAO2B,SAAST,UAAT,CAAoB,CAApB,EAAuBG,KAA9B,EAAqCpB,EAArC,CAAwCQ,KAAxC,CAA8C,UAA9C;AACAT,mBAAO2B,SAAST,UAAT,CAAoB,CAApB,EAAuBK,IAA9B,EAAoCtB,EAApC,CAAuCQ,KAAvC,CAA6C,eAA7C;AACAT,mBAAO2B,SAAST,UAAT,CAAoB,CAApB,EAAuBG,KAA9B,EAAqCpB,EAArC,CAAwCQ,KAAxC,CAA8C,UAA9C;;AAEAd;AACH,SATD;AAUH,KAtBD;;AAwBAD,OAAG,2FAAH,EAAgG,UAASC,IAAT,EAAe;AAC3G,YAAIqB,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAiB;AAC7BjB,mBAAOiB,QAAQxB,GAAf,EAAoBQ,EAApB,CAAuBQ,KAAvB,CAA6B,mEAA7B;AAEH,SAHD;AAIAL,iBACI;AACIc,wBAAY,CACR,EAAE,QAAQ,YAAV,EAAwB,SAAS,UAAjC,EADQ;AADhB,SADJ,EAKSF,SALT;AAMA/B,YAAIO,EAAJ,CAAOoC,cAAP,CAAsB,IAAtB,EAA4B,kBAA5B;AACAjC;AAEH,KAdD;;AAgBAD,OAAG,kFAAH,EAAuF,UAASC,IAAT,EAAe;AAClG,YAAIqB,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAiB;AAC7BjB,mBAAOiB,QAAQxB,GAAf,EAAoBQ,EAApB,CAAuBQ,KAAvB,CAA6B,mEAA7B;AAEH,SAHD;AAIAL,iBACI;AACIc,wBAAY,CACR,EAAE,QAAQ,YAAV,EAAwB,SAAS,UAAjC,EAA6C,QAAQ,QAArD,EADQ,EAER,EAAE,QAAQ,iBAAV,EAA6B,SAAS,UAAtC,EAAkD,QAAQ,QAA1D,EAFQ;AADhB,SADJ,EAMSF,SANT;AAOA/B,YAAIO,EAAJ,CAAOqC,eAAP,CAAuB,kBAAvB,EAA2C/B,IAA3C,CAAgD,UAASC,MAAT,EAAgB;AAC5DC,mBAAOD,MAAP,EAAeE,EAAf,CAAkBC,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,mBAAOD,OAAO,CAAP,EAAUuB,KAAjB,EAAwBrB,EAAxB,CAA2BQ,KAA3B,CAAiC,UAAjC;AACAT,mBAAOD,OAAO,CAAP,EAAU+B,IAAjB,EAAuB7B,EAAvB,CAA0BQ,KAA1B,CAAgC,YAAhC;AACAT,mBAAOD,OAAO,CAAP,EAAUuB,KAAjB,EAAwBrB,EAAxB,CAA2BQ,KAA3B,CAAiC,UAAjC;AACAT,mBAAOD,OAAO,CAAP,EAAU+B,IAAjB,EAAuB7B,EAAvB,CAA0BQ,KAA1B,CAAgC,iBAAhC;AACAd;AACH,SAPD;AAUH,KAtBD;;AAwBAD,OAAG,mDAAH,EAAwD,UAASC,IAAT,EAAe;AACnE,YAAIqB,YAAY,SAAZA,SAAY,CAASC,OAAT,EAAiB;AAC7BjB,mBAAOiB,QAAQxB,GAAf,EAAoBQ,EAApB,CAAuBQ,KAAvB,CAA6B,mEAA7B;AAEH,SAHD;AAIAL,iBACI;AACIc,wBAAY;AADhB,SADJ,EAKSF,SALT;AAMA/B,YAAIO,EAAJ,CAAOqC,eAAP,CAAuB,kBAAvB,EAA2C/B,IAA3C,CAAgD,UAASC,MAAT,EAAgB;AAC5DC,mBAAOD,MAAP,EAAeE,EAAf,CAAkBC,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAR;AACH,SAHD;AAIH,KAfD;;AAiBA,aAASS,QAAT,CAAkB2B,QAAlB,EAA4BC,gBAA5B,EAA6C;AACzC/C,YAAIG,UAAJ,CAAe6C,iBAAf,GAAmC,UAAShB,OAAT,EAAkB;AACjD,gBAAGe,gBAAH,EAAoB;AAChBA,iCAAiBf,OAAjB;AACH;AACD,mBAAOhC,IAAIE,EAAJ,CAAO+C,IAAP,CAAY;AACf1B,0BAAUS,OADK;AAEf1B,sBAAMwC;AAFS,aAAZ,CAAP;AAIH,SARD;AASH;AAGJ,CApOD","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('GenericDatasource', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q = Q;\n        ctx.backendSrv = {};\n        ctx.templateSrv = {};\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n        ctx.ds = new Datasource({url:'https://testUrl'}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n    });\n\n    it('should return an empty array when no alias is set', function(done) {\n        ctx.ds.query({targets: []}).then(function(result) {\n            expect(result.data).to.have.length(0);\n            done();\n        });\n    });\n\n    it('should return the server results when a alias is set', function(done) {\n        mockData([\n            {\n                target: 'X',\n                datapoints: [1, 2, 3]\n            }\n        ]);\n\n \n\n        ctx.ds.query({alias : \"testNamespace\", targets:[]}).then(function(result) {\n            expect(result._request.data.alias).to.equal(\"testNamespace\");\n            var series = result.data[0];\n            expect(series.target).to.equal('X');\n            expect(series.datapoints).to.have.length(3);\n            done();\n        });\n    });\n\n    it('getSources should return a map of lists ', function(done) {\n        \n        mockData([\n            {\n                \"firstNamespace\" : ['aliasOne', 'aliasTwo'] \n            },\n            {\n                \"secondNamespace\" : ['aliasThree']\n            }\n        ]);\n        ctx.ds.getSources(\"map\").then(function(result){\n            var firstSource = result[0];\n            expect(firstSource.firstNamespace[0]).to.equal('aliasOne');\n            expect(firstSource.firstNamespace[1]).to.equal('aliasTwo');\n            var secondSource = result[1];\n            expect(secondSource.secondNamespace[0]).to.equal('aliasThree');\n\n            done();\n        });\n       \n    });\n    \n    it('query should send parameters that are mapped using field name to value ', function(done) {\n        var validator = function(request){\n            expect(request.url).to.equal('https://testUrl/api/providers/query');\n            expect(request.data.parameters.column_a).to.equal(\"testValue\");\n            expect(request.data.parameters.column_b).to.equal(\"anotherValue\");\n\n        };\n        mockData(\n            {\n                \"series\":[\n                    {\n                        \"data\":[\n                            [\n                                1,\n                                249\n                            ]\n                        ],\n                        \"name\":\"# of checks\"\n                    },\n                    {\n                        \"data\":[\n                            [\n                                1,\n                                134\n                            ],\n                            [\n                                2,\n                                141\n                            ]\n                        ],\n                        \"name\":\"# of distinct checks\"\n                    },\n                    {\n                        \"data\":[\n                            [\n                                1,\n                                56\n                            ]\n                        ],\n                        \"name\":\"# of attributes\"\n                    }\n                ],\n                \"mapping\":[\n                    {\n                        \"key\":1,\n                        \"value\":\"ATS\"\n                    },\n                    {\n                        \"key\":2,\n                        \"value\":\"BATS\"\n                    }\n                ]\n            },   validator);\n        ctx.ds.query({alias : 'testAlias', targets : [{field: \"column_a\", value: \"testValue\"}, {field: \"column_b\", value: \"anotherValue\"}]}).then(function(result){\n            \n            var series = result.data.series;\n            expect(series).to.have.length(3)\n            expect(series[0].name).to.equal('# of checks');\n            expect(series[0].data[0][0]).to.equal(1);\n            expect(series[0].data[0][1]).to.equal(249);\n\n\n            var mapping = result.data.mapping\n            expect(mapping).to.have.length(2)\n            expect(mapping[0].key).to.equal(1);\n            expect(mapping[0].value).to.equal('ATS');\n            expect(mapping[1].key).to.equal(2);\n            expect(mapping[1].value).to.equal(\"BATS\");\n\n            done();\n        });\n    });\n\n    it('getMetadata should perform a request using the alias ', function(done) {\n        var validator = function(request){\n            expect(request.url).to.equal('https://testUrl/api/providers/getMetadata/?alias=test');\n\n        };\n        mockData(\n            {\n              parameters: [\n                  { \"name\" :\"Test Field\", \"field\": \"column_a\"},\n                  { \"name\" :\"Another Field\", \"field\": \"column_b\"}\n              ]\n            },   validator);\n        ctx.ds.getMetadata(\"test\").then(function(result){\n            var metadata = result.data;\n            expect(metadata.parameters).to.have.length(2);\n            expect(metadata.parameters[0].name).to.equal('Test Field');\n            expect(metadata.parameters[0].field).to.equal('column_a');\n            expect(metadata.parameters[1].name).to.equal('Another Field');\n            expect(metadata.parameters[1].field).to.equal('column_b');\n\n            done();\n        });\n    });\n\n    it('updateMetadata should perform a request using the alias and store the data for parameters', function(done) {\n        var validator = function(request){\n            expect(request.url).to.equal('https://testUrl/api/providers/getMetadata/?alias=anotherTestAlias');\n\n        };\n        mockData(\n            {\n                parameters: [\n                    { \"name\" :\"Test Field\", \"field\": \"column_a\"}\n                ]\n            },   validator);\n        ctx.ds.updateMetadata(null, \"anotherTestAlias\");\n        done();\n        \n    });\n\n    it('metricFindQuery should map values to work with the global variable dropdown list', function(done) {\n        var validator = function(request){\n            expect(request.url).to.equal('https://testUrl/api/providers/getMetadata/?alias=anotherTestAlias');\n\n        };\n        mockData(\n            {\n                parameters: [\n                    { \"name\" :\"Test Field\", \"field\": \"column_a\", \"type\" :\"string\"},\n                    { \"name\" :\"Different Field\", \"field\": \"column_b\", \"type\" :\"string\"}\n                ]\n            },   validator);\n        ctx.ds.metricFindQuery(\"anotherTestAlias\").then(function(result){\n            expect(result).to.have.length(2);\n            expect(result[0].value).to.equal(\"column_a\");\n            expect(result[0].text).to.equal(\"Test Field\");\n            expect(result[1].value).to.equal(\"column_b\");\n            expect(result[1].text).to.equal(\"Different Field\");\n            done();\n        });        \n        \n\n    });\n\n    it('metricFindQuery should work with empty parameters', function(done) {\n        var validator = function(request){\n            expect(request.url).to.equal('https://testUrl/api/providers/getMetadata/?alias=anotherTestAlias');\n\n        };\n        mockData(\n            {\n                parameters: [\n                    \n                ]\n            },   validator);\n        ctx.ds.metricFindQuery(\"anotherTestAlias\").then(function(result){\n            expect(result).to.have.length(0);\n            done();\n        });\n    });\n    \n    function mockData(response, requestValidator){\n        ctx.backendSrv.datasourceRequest = function(request) {\n            if(requestValidator){\n                requestValidator(request)\n            }\n            return ctx.$q.when({\n                _request: request,\n                data: response\n            });\n        };\n    }\n\n\n});\n"]}