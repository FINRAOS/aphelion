{"version":3,"sources":["../../src/datasource.js"],"names":["vm","DefaultDatasource","instanceSettings","$q","backendSrv","templateSrv","$http","type","url","name","q","headers","metadata","basicAuth","withCredentials","panel","uri","getMetadata","then","response","dd","hasRawData","rawData","rawDataAlias","sources","dataspecType","getSources","result","namespaces","namespace","method","status","data","error","alias","mapMetrics","metrics","parameters","forEach","parameter","push","value","field","text","options","scopedVars","variables","variable","current","targets","length","query","buildQueryParameters","filter","t","hide","when","doRequest","message","title","undefined","datasourceRequest","target","Object","keys","scopedVarKey","scopedVar"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nlet vm;\nexport class DefaultDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, $http) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Content-Type': 'application/json'};\n    this.metadata= {};\n    this.headers['Authorization'] = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.$http = $http;\n    vm=this;\n\n  }\n\n  updateMetadata(panel, url, uri){\n      this.getMetadata(url, uri).then(function(response){\n          // vm.metadata = response.parameters;\n          if(vm.metadata) {\n              panel.dd = {};\n              panel.dd.hasRawData = vm.metadata.rawData;\n              panel.dd.rawDataAlias = vm.metadata.rawDataAlias;\n          }\n      });\n  }\n\n  getMetrics(){\n    return vm.metadata;\n  }\n\n  loadSources(panel){\n    if(!panel.sources && !panel.dataspecType)\n      this.getSources('timeseries').then(function(result){\n        panel.sources = result;\n      });\n  }\n\n  getAliases(namespaces, namespace){\n    return namespaces[namespace];\n  }\n\n  getMetadata(url, uri) {\n      return vm.$http({\n          url: url + \"/\" + uri + \"/metadata\",\n          method: 'GET',\n      }).then(response => {\n          if (response.status === 200) {\n          return response.data;\n      } }, (error)=> {\n          return null;\n      });\n  }\n\n  metricFindQuery(alias) {\n    return this.getMetadata(alias).then(this.mapMetrics)\n  }\n  \n  mapMetrics(result){\n\n    var metrics =[];\n\n    if(result.parameters) {\n        result.parameters.forEach(function (parameter) {\n            metrics.push({value: parameter.field, text: parameter.name})\n        });\n    }\n    return metrics;\n  }\n\n  getSources(alias){\n      return null;\n  }\n\n  query(options) {\n    if(!options.scopedVars){\n      options.scopedVars = {};\n    }\n\n    if(this.templateSrv.variables) {\n        this.templateSrv.variables.forEach(function (variable) {\n            if (variable.current && variable.current.value) {\n                options.scopedVars[variable.name] = {\n                    text: variable.current.text,\n                    value: variable.current.value\n                }\n            }\n        });\n    }\n\n    if(options.targets.length > 0 && !options.alias) {\n      options.alias = options.targets[0].alias;\n      options.namespace = options.targets[0].namespace;\n    }\n\n    var query = this.buildQueryParameters(options);\n\n    query.targets = query.targets.filter(t => !t.hide);\n    if (!options.alias) {\n      return this.q.when({data: []});\n    }\n\n      return this.doRequest({\n        url: options.namespace + \"/\" + options.alias + '/query',\n        data: query,\n        method: 'POST'\n      });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/api/providers/testRegistration',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  getOrganization() {\n      return undefined\n\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n\n    options.parameters = {};\n\n    options.parameters = _.filter(options.targets, target => {\n          return target.field !== 'select metric';\n    });\n\n      if(options.targets.length > 0 && options.targets[0].targets !== undefined)\n      options.parameters = _.filter(options.targets[0].targets, target => {\n        return target.value !== undefined;\n      });\n\n    var targets={};\n    if(options.parameters.length > 0)\n    options.parameters.forEach(function(parameter){\n      targets[parameter.field] = parameter.value;\n    });\n\n    if(options.scopedVars) {\n      Object.keys(options.scopedVars).forEach(function (scopedVarKey) {\n        var scopedVar = options.scopedVars[scopedVarKey];\n        targets[scopedVarKey] = scopedVar.value;\n      });\n    }\n    options.parameters = targets;\n\n    return options;\n  }\n}\n"]}